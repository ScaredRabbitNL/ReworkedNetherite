plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.97'
    id 'net.darkhax.curseforgegradle' version '1.1.24'
    id "com.modrinth.minotaur" version "2.+"

}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven { url = "https://maven.resourcefulbees.com/repository/maven-public/" }
}

base {
    archivesName = "[NeoForge] $mod_name"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}
java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()


    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {

    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "com.teamresourceful.resourcefullib:resourcefullib-neoforge-${rootProject.minecraft_version}:${rootProject.resourcefullib_version}"

    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

jar {


    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
    exclude(".cache/**") // Remove datagen cache from jar.
    exclude("**/reworked_netherite/datagen/**") // Remove data gen code from jar.


}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
import net.darkhax.curseforgegradle.TaskPublishCurseForge

tasks.register('publishCurseForge', TaskPublishCurseForge) {

    group = "Publishing"

    // This token is used to authenticate with CurseForge. It should be handled
    // with the same level of care and security as your actual password. You
    // should never share your token with an untrusted source or publish it
    // publicly to GitHub or embed it within a project. The best practice is to
    // store this token in an environment variable or a build secret.
    apiToken = providers.gradleProperty("curseforgeAPIToken")

    // A project ID is required to tell CurseForge which project the uploaded
    // file belongs to. This is public on your project page and is not private
    // information.
    def projectId = rootProject.curse_id

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    def mainFile = upload(projectId, file("build/libs/[NeoForge] ${mod_name}-${version}.jar"))
    mainFile.changelog = file("CHANGELOG.md").absoluteFile
    mainFile.releaseType = 'release'
    mainFile.addGameVersion("$minecraft_version")
    mainFile.changelogType = 'markdown'
    mainFile.displayName = "[NeoForge] $mod_name-$version"
    mainFile.addRequirement("resourceful-lib")
    mainFile.addModLoader("NeoForge")


}



modrinth {


    token = providers.gradleProperty("modrinthAPIToken") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "$modrinth_id" // This can be the project ID or the slug. Either will work!
    changelog = file("CHANGELOG.md").text
    versionNumber = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    uploadFile = file("build/libs/[NeoForge] ${mod_name}-${version}.jar") // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = [mc_publish_version] // Must be an array, even with only one version
    loaders = ["neoforge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    dependencies {
        required.version("resourcefullib", ">=2.4.0 <2.5.0")
    }


}


tasks.register('release') {
    group = "Publishing"
    dependsOn build
    dependsOn publishCurseForge


}




